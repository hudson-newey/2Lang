@lib/memory/padding.2
@lib/types/null.2
@lib/helpers/helpers.2

// contains macros to modify ELF headers
// if you want more information I recommend reading this article from linux-audit
// https://linux-audit.com/elf-binaries-on-linux-understanding-and-analysis/

// ELF header
#ELF    01111111 01000101 01001100 01000110

// class headers
#E_32_BIT_CLASS_HEADER    00000001
#E_64_BIT_CLASS_HEADER    00000010

// data headers
// LSB = little endian
// MSB = big endian
#E_DATA_LSB_HEADER    00000001
#E_DATA_MSB_HEADER    00000010

// version headers
#E_VERSION_HEADER     00000001

// OS/ABI headers
#E_SYSTEM_V_HEADER    00000000

// you should only really be using these macros in your program
// these elf headers are optimized for AMD64 processors
// you might have the change the data headers for different processors
#E_32  ELF E_32_BIT_CLASS_HEADER E_DATA_LSB_HEADER E_VERSION_HEADER E_SYSTEM_V_HEADER 64_ZERO_BITS
#E_64  ELF E_64_BIT_CLASS_HEADER E_DATA_LSB_HEADER E_VERSION_HEADER E_SYSTEM_V_HEADER 64_ZERO_BITS

// EHDR

#E_TYPE_REL     00000001 NULL
#E_TYPE_EXEC    00000010 NULL
#E_TYPE_DYN     00000011 NULL
#E_TYPE_CORE    00000100 NULL

#E_MACHINE_x86  00111110 NULL

#E_VERSION          00000001 NULL
#E_VERSION_CUSTOM   $ NULL

#ELF_E_ENTRY            16_ZERO_BITS NULL $

// TODO: I haven't completed everything below this point
#E_PHOFF        NOOP
#E_SHOFF        NOOP
#E_FLAGS        NOOP
#E_EHSIZE       NOOP
#E_PHENTSIZE    NOOP
#E_PHNUM        NOOP
#E_SHENTSIZE    NOOP
#E_SHNUM        NOOP
#E_SHSTRNDX     NOOP
